// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: proto/polyfs.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FileSystem_PutFile_FullMethodName         = "/polyfs.FileSystem/PutFile"
	FileSystem_GetFile_FullMethodName         = "/polyfs.FileSystem/GetFile"
	FileSystem_DeleteFile_FullMethodName      = "/polyfs.FileSystem/DeleteFile"
	FileSystem_ListFiles_FullMethodName       = "/polyfs.FileSystem/ListFiles"
	FileSystem_MakeDirectory_FullMethodName   = "/polyfs.FileSystem/MakeDirectory"
	FileSystem_RemoveDirectory_FullMethodName = "/polyfs.FileSystem/RemoveDirectory"
)

// FileSystemClient is the client API for FileSystem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Servicio principal para operaciones del sistema de archivos
type FileSystemClient interface {
	// Operaciones de archivos
	PutFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PutFileRequest, PutFileResponse], error)
	GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetFileResponse], error)
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error)
	ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error)
	// Operaciones de directorios
	MakeDirectory(ctx context.Context, in *MakeDirectoryRequest, opts ...grpc.CallOption) (*MakeDirectoryResponse, error)
	RemoveDirectory(ctx context.Context, in *RemoveDirectoryRequest, opts ...grpc.CallOption) (*RemoveDirectoryResponse, error)
}

type fileSystemClient struct {
	cc grpc.ClientConnInterface
}

func NewFileSystemClient(cc grpc.ClientConnInterface) FileSystemClient {
	return &fileSystemClient{cc}
}

func (c *fileSystemClient) PutFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PutFileRequest, PutFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileSystem_ServiceDesc.Streams[0], FileSystem_PutFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PutFileRequest, PutFileResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileSystem_PutFileClient = grpc.ClientStreamingClient[PutFileRequest, PutFileResponse]

func (c *fileSystemClient) GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileSystem_ServiceDesc.Streams[1], FileSystem_GetFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetFileRequest, GetFileResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileSystem_GetFileClient = grpc.ServerStreamingClient[GetFileResponse]

func (c *fileSystemClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFileResponse)
	err := c.cc.Invoke(ctx, FileSystem_DeleteFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemClient) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFilesResponse)
	err := c.cc.Invoke(ctx, FileSystem_ListFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemClient) MakeDirectory(ctx context.Context, in *MakeDirectoryRequest, opts ...grpc.CallOption) (*MakeDirectoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MakeDirectoryResponse)
	err := c.cc.Invoke(ctx, FileSystem_MakeDirectory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemClient) RemoveDirectory(ctx context.Context, in *RemoveDirectoryRequest, opts ...grpc.CallOption) (*RemoveDirectoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveDirectoryResponse)
	err := c.cc.Invoke(ctx, FileSystem_RemoveDirectory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileSystemServer is the server API for FileSystem service.
// All implementations must embed UnimplementedFileSystemServer
// for forward compatibility.
//
// Servicio principal para operaciones del sistema de archivos
type FileSystemServer interface {
	// Operaciones de archivos
	PutFile(grpc.ClientStreamingServer[PutFileRequest, PutFileResponse]) error
	GetFile(*GetFileRequest, grpc.ServerStreamingServer[GetFileResponse]) error
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error)
	ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error)
	// Operaciones de directorios
	MakeDirectory(context.Context, *MakeDirectoryRequest) (*MakeDirectoryResponse, error)
	RemoveDirectory(context.Context, *RemoveDirectoryRequest) (*RemoveDirectoryResponse, error)
	mustEmbedUnimplementedFileSystemServer()
}

// UnimplementedFileSystemServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileSystemServer struct{}

func (UnimplementedFileSystemServer) PutFile(grpc.ClientStreamingServer[PutFileRequest, PutFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PutFile not implemented")
}
func (UnimplementedFileSystemServer) GetFile(*GetFileRequest, grpc.ServerStreamingServer[GetFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedFileSystemServer) DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedFileSystemServer) ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}
func (UnimplementedFileSystemServer) MakeDirectory(context.Context, *MakeDirectoryRequest) (*MakeDirectoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeDirectory not implemented")
}
func (UnimplementedFileSystemServer) RemoveDirectory(context.Context, *RemoveDirectoryRequest) (*RemoveDirectoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDirectory not implemented")
}
func (UnimplementedFileSystemServer) mustEmbedUnimplementedFileSystemServer() {}
func (UnimplementedFileSystemServer) testEmbeddedByValue()                    {}

// UnsafeFileSystemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileSystemServer will
// result in compilation errors.
type UnsafeFileSystemServer interface {
	mustEmbedUnimplementedFileSystemServer()
}

func RegisterFileSystemServer(s grpc.ServiceRegistrar, srv FileSystemServer) {
	// If the following call pancis, it indicates UnimplementedFileSystemServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileSystem_ServiceDesc, srv)
}

func _FileSystem_PutFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileSystemServer).PutFile(&grpc.GenericServerStream[PutFileRequest, PutFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileSystem_PutFileServer = grpc.ClientStreamingServer[PutFileRequest, PutFileResponse]

func _FileSystem_GetFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileSystemServer).GetFile(m, &grpc.GenericServerStream[GetFileRequest, GetFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileSystem_GetFileServer = grpc.ServerStreamingServer[GetFileResponse]

func _FileSystem_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSystem_DeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystem_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSystem_ListFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServer).ListFiles(ctx, req.(*ListFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystem_MakeDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServer).MakeDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSystem_MakeDirectory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServer).MakeDirectory(ctx, req.(*MakeDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystem_RemoveDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServer).RemoveDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSystem_RemoveDirectory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServer).RemoveDirectory(ctx, req.(*RemoveDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileSystem_ServiceDesc is the grpc.ServiceDesc for FileSystem service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileSystem_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "polyfs.FileSystem",
	HandlerType: (*FileSystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteFile",
			Handler:    _FileSystem_DeleteFile_Handler,
		},
		{
			MethodName: "ListFiles",
			Handler:    _FileSystem_ListFiles_Handler,
		},
		{
			MethodName: "MakeDirectory",
			Handler:    _FileSystem_MakeDirectory_Handler,
		},
		{
			MethodName: "RemoveDirectory",
			Handler:    _FileSystem_RemoveDirectory_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PutFile",
			Handler:       _FileSystem_PutFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetFile",
			Handler:       _FileSystem_GetFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/polyfs.proto",
}

const (
	ClusterManagement_JoinCluster_FullMethodName      = "/polyfs.ClusterManagement/JoinCluster"
	ClusterManagement_LeaveCluster_FullMethodName     = "/polyfs.ClusterManagement/LeaveCluster"
	ClusterManagement_GetClusterStatus_FullMethodName = "/polyfs.ClusterManagement/GetClusterStatus"
)

// ClusterManagementClient is the client API for ClusterManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Servicio para la gestión de nodos en el cluster
type ClusterManagementClient interface {
	JoinCluster(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	LeaveCluster(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*LeaveResponse, error)
	GetClusterStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type clusterManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterManagementClient(cc grpc.ClientConnInterface) ClusterManagementClient {
	return &clusterManagementClient{cc}
}

func (c *clusterManagementClient) JoinCluster(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, ClusterManagement_JoinCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagementClient) LeaveCluster(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*LeaveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveResponse)
	err := c.cc.Invoke(ctx, ClusterManagement_LeaveCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagementClient) GetClusterStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, ClusterManagement_GetClusterStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterManagementServer is the server API for ClusterManagement service.
// All implementations must embed UnimplementedClusterManagementServer
// for forward compatibility.
//
// Servicio para la gestión de nodos en el cluster
type ClusterManagementServer interface {
	JoinCluster(context.Context, *JoinRequest) (*JoinResponse, error)
	LeaveCluster(context.Context, *LeaveRequest) (*LeaveResponse, error)
	GetClusterStatus(context.Context, *StatusRequest) (*StatusResponse, error)
	mustEmbedUnimplementedClusterManagementServer()
}

// UnimplementedClusterManagementServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClusterManagementServer struct{}

func (UnimplementedClusterManagementServer) JoinCluster(context.Context, *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinCluster not implemented")
}
func (UnimplementedClusterManagementServer) LeaveCluster(context.Context, *LeaveRequest) (*LeaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveCluster not implemented")
}
func (UnimplementedClusterManagementServer) GetClusterStatus(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterStatus not implemented")
}
func (UnimplementedClusterManagementServer) mustEmbedUnimplementedClusterManagementServer() {}
func (UnimplementedClusterManagementServer) testEmbeddedByValue()                           {}

// UnsafeClusterManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterManagementServer will
// result in compilation errors.
type UnsafeClusterManagementServer interface {
	mustEmbedUnimplementedClusterManagementServer()
}

func RegisterClusterManagementServer(s grpc.ServiceRegistrar, srv ClusterManagementServer) {
	// If the following call pancis, it indicates UnimplementedClusterManagementServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClusterManagement_ServiceDesc, srv)
}

func _ClusterManagement_JoinCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagementServer).JoinCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterManagement_JoinCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagementServer).JoinCluster(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManagement_LeaveCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagementServer).LeaveCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterManagement_LeaveCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagementServer).LeaveCluster(ctx, req.(*LeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManagement_GetClusterStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagementServer).GetClusterStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterManagement_GetClusterStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagementServer).GetClusterStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClusterManagement_ServiceDesc is the grpc.ServiceDesc for ClusterManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClusterManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "polyfs.ClusterManagement",
	HandlerType: (*ClusterManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinCluster",
			Handler:    _ClusterManagement_JoinCluster_Handler,
		},
		{
			MethodName: "LeaveCluster",
			Handler:    _ClusterManagement_LeaveCluster_Handler,
		},
		{
			MethodName: "GetClusterStatus",
			Handler:    _ClusterManagement_GetClusterStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/polyfs.proto",
}
